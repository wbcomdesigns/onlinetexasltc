<?php
/**
 * Proxy Manager Class
 * 
 * Handles reverse proxy configuration for domain mapping
 */

if (!defined('ABSPATH')) {
    exit;
}

class Dokan_Proxy_Manager {

    /**
     * Constructor
     */
    public function __construct() {
        add_action('init', array($this, 'setup_proxy_management_functionality'));
    }

    /**
     * Setup proxy management functionality
     */
    public function setup_proxy_management_functionality() {
        // Add AJAX handlers
        add_action('wp_ajax_dokan_generate_proxy_config', array($this, 'process_ajax_generate_proxy_config'));
        add_action('wp_ajax_dokan_test_proxy_connection', array($this, 'process_ajax_test_proxy_connection'));
    }

    /**
     * Generate proxy configuration for domain
     */
    public function generate_config($domain_mapping) {
        $domain = $domain_mapping->domain;
        $vendor_id = $domain_mapping->vendor_id;
        
        // Get vendor store URL
        $vendor = dokan_get_vendor_by_id($vendor_id);
        if (!$vendor) {
            return new WP_Error('vendor_not_found', __('Vendor not found.', 'dokan-vendor-domain-mapper'));
        }

        $store_url = dokan_get_store_url($vendor_id);
        $target_url = get_site_url() . '/store/' . $vendor->get_shop_url();

        $configs = array(
            'nginx' => $this->generate_nginx_config($domain, $target_url, $domain_mapping->ssl_status),
            'apache' => $this->generate_apache_config($domain, $target_url, $domain_mapping->ssl_status),
            'cloudflare' => $this->generate_cloudflare_config($domain, $target_url),
            'caddy' => $this->generate_caddy_config($domain, $target_url, $domain_mapping->ssl_status)
        );

        return array(
            'domain' => $domain,
            'target_url' => $target_url,
            'configs' => $configs,
            'setup_instructions' => $this->get_setup_instructions($domain, $target_url)
        );
    }

    /**
     * Generate NGINX configuration
     */
    private function generate_nginx_config($domain, $target_url, $ssl_status = 'none') {
        $config = "# NGINX Configuration for {$domain}\n";
        $config .= "# Generated by Dokan Vendor Domain Mapper\n\n";

        // HTTP to HTTPS redirect
        if ($ssl_status !== 'none') {
            $config .= "server {\n";
            $config .= "    listen 80;\n";
            $config .= "    server_name {$domain};\n";
            $config .= "    return 301 https://\$server_name\$request_uri;\n";
            $config .= "}\n\n";
        }

        // Main server block
        $config .= "server {\n";
        $config .= "    listen " . ($ssl_status !== 'none' ? '443 ssl' : '80') . ";\n";
        $config .= "    server_name {$domain};\n\n";

        // SSL configuration
        if ($ssl_status !== 'none') {
            $config .= "    # SSL Configuration\n";
            $config .= "    ssl_certificate /etc/ssl/certs/{$domain}.crt;\n";
            $config .= "    ssl_certificate_key /etc/ssl/private/{$domain}.key;\n";
            $config .= "    ssl_protocols TLSv1.2 TLSv1.3;\n";
            $config .= "    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n";
            $config .= "    ssl_prefer_server_ciphers off;\n";
            $config .= "    ssl_session_cache shared:SSL:10m;\n";
            $config .= "    ssl_session_timeout 10m;\n\n";
        }

        // Proxy configuration
        $config .= "    # Proxy Configuration\n";
        $config .= "    location / {\n";
        $config .= "        proxy_pass {$target_url};\n";
        $config .= "        proxy_set_header Host \$host;\n";
        $config .= "        proxy_set_header X-Real-IP \$remote_addr;\n";
        $config .= "        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;\n";
        $config .= "        proxy_set_header X-Forwarded-Proto \$scheme;\n";
        $config .= "        proxy_set_header X-Forwarded-Host \$host;\n";
        $config .= "        proxy_set_header X-Forwarded-Port \$server_port;\n\n";
        
        $config .= "        # Timeout settings\n";
        $config .= "        proxy_connect_timeout 60s;\n";
        $config .= "        proxy_send_timeout 60s;\n";
        $config .= "        proxy_read_timeout 60s;\n\n";
        
        $config .= "        # Buffer settings\n";
        $config .= "        proxy_buffering on;\n";
        $config .= "        proxy_buffer_size 4k;\n";
        $config .= "        proxy_buffers 8 4k;\n";
        $config .= "    }\n\n";

        // Health check endpoint
        $config .= "    # Health check endpoint\n";
        $config .= "    location /health {\n";
        $config .= "        access_log off;\n";
        $config .= "        return 200 'OK';\n";
        $config .= "        add_header Content-Type text/plain;\n";
        $config .= "    }\n";

        $config .= "}\n";

        return $config;
    }

    /**
     * Generate Apache configuration
     */
    private function generate_apache_config($domain, $target_url, $ssl_status = 'none') {
        $config = "# Apache Configuration for {$domain}\n";
        $config .= "# Generated by Dokan Vendor Domain Mapper\n\n";

        // HTTP to HTTPS redirect
        if ($ssl_status !== 'none') {
            $config .= "<VirtualHost *:80>\n";
            $config .= "    ServerName {$domain}\n";
            $config .= "    Redirect permanent / https://{$domain}/\n";
            $config .= "</VirtualHost>\n\n";
        }

        // Main virtual host
        $config .= "<VirtualHost *:" . ($ssl_status !== 'none' ? '443' : '80') . ">\n";
        $config .= "    ServerName {$domain}\n";
        $config .= "    DocumentRoot /var/www/html\n\n";

        // SSL configuration
        if ($ssl_status !== 'none') {
            $config .= "    # SSL Configuration\n";
            $config .= "    SSLEngine on\n";
            $config .= "    SSLCertificateFile /etc/ssl/certs/{$domain}.crt\n";
            $config .= "    SSLCertificateKeyFile /etc/ssl/private/{$domain}.key\n";
            $config .= "    SSLCertificateChainFile /etc/ssl/certs/{$domain}.chain.crt\n\n";
        }

        // Proxy configuration
        $config .= "    # Proxy Configuration\n";
        $config .= "    ProxyPreserveHost On\n";
        $config .= "    ProxyPass / {$target_url}/\n";
        $config .= "    ProxyPassReverse / {$target_url}/\n\n";

        // Proxy headers
        $config .= "    # Proxy Headers\n";
        $config .= "    RequestHeader set X-Forwarded-Proto \"http\"\n";
        if ($ssl_status !== 'none') {
            $config .= "    RequestHeader set X-Forwarded-Proto \"https\"\n";
        }
        $config .= "    RequestHeader set X-Forwarded-Port \"80\"\n";
        if ($ssl_status !== 'none') {
            $config .= "    RequestHeader set X-Forwarded-Port \"443\"\n";
        }
        $config .= "    RequestHeader set X-Forwarded-For \"%{REMOTE_ADDR}s\"\n\n";

        // Health check endpoint
        $config .= "    # Health check endpoint\n";
        $config .= "    <Location /health>\n";
        $config .= "        SetHandler application/x-httpd-php\n";
        $config .= "        php_value auto_prepend_file none\n";
        $config .= "        php_value auto_append_file none\n";
        $config .= "    </Location>\n";

        $config .= "</VirtualHost>\n";

        return $config;
    }

    /**
     * Generate Cloudflare configuration
     */
    private function generate_cloudflare_config($domain, $target_url) {
        $config = "# Cloudflare Workers Configuration for {$domain}\n";
        $config .= "# Generated by Dokan Vendor Domain Mapper\n\n";

        $config .= "addEventListener('fetch', event => {\n";
        $config .= "  event.respondWith(handleRequest(event.request))\n";
        $config .= "})\n\n";

        $config .= "async function handleRequest(request) {\n";
        $config .= "  const url = new URL(request.url)\n";
        $config .= "  const targetUrl = '{$target_url}' + url.pathname + url.search\n\n";

        $config .= "  const modifiedRequest = new Request(targetUrl, {\n";
        $config .= "    method: request.method,\n";
        $config .= "    headers: request.headers,\n";
        $config .= "    body: request.body\n";
        $config .= "  })\n\n";

        $config .= "  // Add proxy headers\n";
        $config .= "  modifiedRequest.headers.set('X-Forwarded-Proto', url.protocol.replace(':', ''))\n";
        $config .= "  modifiedRequest.headers.set('X-Forwarded-Host', url.hostname)\n";
        $config .= "  modifiedRequest.headers.set('X-Forwarded-Port', url.port || (url.protocol === 'https:' ? '443' : '80'))\n\n";

        $config .= "  try {\n";
        $config .= "    const response = await fetch(modifiedRequest)\n";
        $config .= "    return response\n";
        $config .= "  } catch (error) {\n";
        $config .= "    return new Response('Proxy Error: ' + error.message, { status: 502 })\n";
        $config .= "  }\n";
        $config .= "}\n";

        return $config;
    }

    /**
     * Generate Caddy configuration
     */
    private function generate_caddy_config($domain, $target_url, $ssl_status = 'none') {
        $config = "# Caddy Configuration for {$domain}\n";
        $config .= "# Generated by Dokan Vendor Domain Mapper\n\n";

        $config .= "{$domain} {\n";
        
        if ($ssl_status === 'none') {
            $config .= "    tls off\n";
        }
        
        $config .= "    reverse_proxy {$target_url} {\n";
        $config .= "        header_up Host {host}\n";
        $config .= "        header_up X-Real-IP {remote_host}\n";
        $config .= "        header_up X-Forwarded-For {remote_host}\n";
        $config .= "        header_up X-Forwarded-Proto {scheme}\n";
        $config .= "    }\n";
        
        $config .= "}\n";

        return $config;
    }

    /**
     * Get setup instructions
     */
    private function get_setup_instructions($domain, $target_url) {
        $instructions = array(
            'nginx' => array(
                'title' => __('NGINX Setup Instructions', 'dokan-vendor-domain-mapper'),
                'steps' => array(
                    __('Copy the NGINX configuration to your server', 'dokan-vendor-domain-mapper'),
                    __('Place the configuration in /etc/nginx/sites-available/', 'dokan-vendor-domain-mapper'),
                    __('Create a symbolic link: sudo ln -s /etc/nginx/sites-available/{$domain} /etc/nginx/sites-enabled/', 'dokan-vendor-domain-mapper'),
                    __('Test the configuration: sudo nginx -t', 'dokan-vendor-domain-mapper'),
                    __('Reload NGINX: sudo systemctl reload nginx', 'dokan-vendor-domain-mapper')
                )
            ),
            'apache' => array(
                'title' => __('Apache Setup Instructions', 'dokan-vendor-domain-mapper'),
                'steps' => array(
                    __('Copy the Apache configuration to your server', 'dokan-vendor-domain-mapper'),
                    __('Place the configuration in /etc/apache2/sites-available/', 'dokan-vendor-domain-mapper'),
                    __('Enable the site: sudo a2ensite {$domain}', 'dokan-vendor-domain-mapper'),
                    __('Test the configuration: sudo apache2ctl configtest', 'dokan-vendor-domain-mapper'),
                    __('Reload Apache: sudo systemctl reload apache2', 'dokan-vendor-domain-mapper')
                )
            ),
            'cloudflare' => array(
                'title' => __('Cloudflare Workers Setup Instructions', 'dokan-vendor-domain-mapper'),
                'steps' => array(
                    __('Log in to your Cloudflare dashboard', 'dokan-vendor-domain-mapper'),
                    __('Go to Workers & Pages', 'dokan-vendor-domain-mapper'),
                    __('Create a new Worker', 'dokan-vendor-domain-mapper'),
                    __('Copy the Workers code to the script editor', 'dokan-vendor-domain-mapper'),
                    __('Deploy the Worker', 'dokan-vendor-domain-mapper'),
                    __('Add a custom domain to the Worker', 'dokan-vendor-domain-mapper')
                )
            ),
            'caddy' => array(
                'title' => __('Caddy Setup Instructions', 'dokan-vendor-domain-mapper'),
                'steps' => array(
                    __('Copy the Caddy configuration to your Caddyfile', 'dokan-vendor-domain-mapper'),
                    __('Reload Caddy: sudo systemctl reload caddy', 'dokan-vendor-domain-mapper'),
                    __('Caddy will automatically provision SSL certificates', 'dokan-vendor-domain-mapper')
                )
            )
        );

        return $instructions;
    }

    /**
     * Test proxy connection
     */
    public function test_proxy_connection($domain, $target_url) {
        $test_url = "https://{$domain}/health";
        
        $response = wp_remote_get($test_url, array(
            'timeout' => 10,
            'sslverify' => false
        ));

        if (is_wp_error($response)) {
            return array(
                'success' => false,
                'error' => $response->get_error_message(),
                'url' => $test_url
            );
        }

        $status_code = wp_remote_retrieve_response_code($response);
        $body = wp_remote_retrieve_body($response);

        return array(
            'success' => $status_code === 200,
            'status_code' => $status_code,
            'body' => $body,
            'url' => $test_url
        );
    }

    /**
     * Get proxy health status
     */
    public function get_proxy_health_status($domain_mapping) {
        $domain = $domain_mapping->domain;
        $vendor_id = $domain_mapping->vendor_id;
        
        $vendor = dokan_get_vendor_by_id($vendor_id);
        if (!$vendor) {
            return array('status' => 'error', 'message' => 'Vendor not found');
        }

        $store_url = dokan_get_store_url($vendor_id);
        $target_url = get_site_url() . '/store/' . $vendor->get_shop_url();

        // Test direct access to target
        $target_response = wp_remote_get($target_url, array(
            'timeout' => 10,
            'sslverify' => false
        ));

        $target_accessible = !is_wp_error($target_response) && wp_remote_retrieve_response_code($target_response) < 400;

        // Test proxy access
        $proxy_response = wp_remote_get("https://{$domain}", array(
            'timeout' => 10,
            'sslverify' => false
        ));

        $proxy_accessible = !is_wp_error($proxy_response) && wp_remote_retrieve_response_code($proxy_response) < 400;

        return array(
            'domain' => $domain,
            'target_url' => $target_url,
            'target_accessible' => $target_accessible,
            'proxy_accessible' => $proxy_accessible,
            'status' => $proxy_accessible ? 'healthy' : 'unhealthy',
            'last_check' => current_time('mysql')
        );
    }

    /**
     * Generate deployment script
     */
    public function generate_deployment_script($domain_mapping, $server_type = 'nginx') {
        $domain = $domain_mapping->domain;
        $config = $this->generate_config($domain_mapping);
        
        $script = "#!/bin/bash\n";
        $script .= "# Deployment script for {$domain}\n";
        $script .= "# Generated by Dokan Vendor Domain Mapper\n\n";

        $script .= "set -e\n\n";

        $script .= "echo 'Deploying proxy configuration for {$domain}...'\n\n";

        if ($server_type === 'nginx') {
            $script .= "# Create NGINX configuration\n";
            $script .= "cat > /etc/nginx/sites-available/{$domain} << 'EOF'\n";
            $script .= $config['configs']['nginx'];
            $script .= "EOF\n\n";

            $script .= "# Enable site\n";
            $script .= "ln -sf /etc/nginx/sites-available/{$domain} /etc/nginx/sites-enabled/\n\n";

            $script .= "# Test configuration\n";
            $script .= "nginx -t\n\n";

            $script .= "# Reload NGINX\n";
            $script .= "systemctl reload nginx\n\n";
        } elseif ($server_type === 'apache') {
            $script .= "# Create Apache configuration\n";
            $script .= "cat > /etc/apache2/sites-available/{$domain}.conf << 'EOF'\n";
            $script .= $config['configs']['apache'];
            $script .= "EOF\n\n";

            $script .= "# Enable site\n";
            $script .= "a2ensite {$domain}.conf\n\n";

            $script .= "# Test configuration\n";
            $script .= "apache2ctl configtest\n\n";

            $script .= "# Reload Apache\n";
            $script .= "systemctl reload apache2\n\n";
        }

        $script .= "echo 'Deployment completed successfully!'\n";
        $script .= "echo 'Testing proxy connection...'\n\n";

        $script .= "# Test proxy connection\n";
        $script .= "if curl -f -s https://{$domain}/health > /dev/null; then\n";
        $script .= "    echo 'Proxy is working correctly!'\n";
        $script .= "else\n";
        $script .= "    echo 'Warning: Proxy test failed. Please check your configuration.'\n";
        $script .= "fi\n";

        return $script;
    }

    /**
     * Process AJAX request for generating proxy config
     */
    public function process_ajax_generate_proxy_config() {
        check_ajax_referer('dokan_domain_mapper_nonce', 'nonce');

        if (!current_user_can('dokan_is_seller')) {
            wp_die(__('Access denied.', 'dokan-vendor-domain-mapper'));
        }

        $domain_id = intval($_POST['domain_id']);
        
        global $wpdb;
        $domain_mapping = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}dokan_domain_mappings WHERE id = %d",
            $domain_id
        ));

        if (!$domain_mapping) {
            wp_send_json_error(__('Domain mapping not found.', 'dokan-vendor-domain-mapper'));
        }

        $config = $this->generate_config($domain_mapping);

        if (is_wp_error($config)) {
            wp_send_json_error($config->get_error_message());
        } else {
            wp_send_json_success($config);
        }
    }

    /**
     * Process AJAX request for testing proxy connection
     */
    public function process_ajax_test_proxy_connection() {
        check_ajax_referer('dokan_domain_mapper_nonce', 'nonce');

        if (!current_user_can('dokan_is_seller')) {
            wp_die(__('Access denied.', 'dokan-vendor-domain-mapper'));
        }

        $domain_id = intval($_POST['domain_id']);
        
        global $wpdb;
        $domain_mapping = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}dokan_domain_mappings WHERE id = %d",
            $domain_id
        ));

        if (!$domain_mapping) {
            wp_send_json_error(__('Domain mapping not found.', 'dokan-vendor-domain-mapper'));
        }

        $result = $this->test_proxy_connection($domain_mapping->domain, '');
        wp_send_json_success($result);
    }
} 